Assume the length of the dataset calls is N and the length of the dataset texts is M

Task 0:
O(1)
because the run time does not change as a function of input

Task 1:
O(M+N)
two for loops iterate dataset calls and texts

Task 2:
There are three for loops iterating the call dateset, and 2 built-in functions (e.g., max and print)
O(3N+2), this can be approximated as O(n)

Task 3:
Part A: there are 2 for loops, the first loop iterates the calls dataset, <-- O(N)
and the second loop iterates the selected Bangalore calls dataset (the worst case is the same as the calls set). <-- O(N)
In addition, two built-in functions (sorted <-- O(NlogN), print <-- O(1))
Thus,
O(2N+ NlogN + 1), this can be approximated as O(NlogN)

Part B: there is 1 for loop, it iterates the selected dataset that calls and answers both in Bangalore. <-- O(N)
The worst case is the selected set is the same length as the calls set. In addition,there are 2 built-in functions
Thus,
O(N+2), this can be approximated as O(n)


Task 4: 6 for loops in this task
callout_numbers = [number[0] for number in calls] # loop through calls, O(N)
answer_numbers = [number[1] for number in calls] # loop through calls, O(N)
textsent_numbers = [number[0] for number in texts] # loop through texts, O(M)
textreceive_numbers = [number[1] for number in texts] # loop through texts, O(M)


# loop through the callout_numbers and find the elements that are not in the combined set.
for num in callout_numbers:
    if num not in other_three_set:
        telemarketers.append(num)

Because other_three_set is a set and test whether an element in a set takes constant time.
The length of callout_numbers is N,
thus, O(N)

# make the numbers printing one line at a time
telemarketers_string = ''

for num in telemarketers:
    telemarketers_string += '{}\n'.format(num)

The worst case senario is the length of telemarketers is the same as the length of the calls.
Thus, O(N)

There are two built-in functions, sorted <-- O(NlogN) and print <-- O(1).

Finally, the overall runtime for this task is O(4N + 2M + NlogN + 1), which can be approximated as O(NlogN + M)
